mvn -v
Apache Maven 3.9.6 (bc0240f3c744dd6b6ec2920b3cd08dcc295161ae)
Maven home: C:\Program Files\maven\apache-maven-3.9.6
Java version: 17.0.11, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk-17
Default locale: en_IN, platform encoding: Cp1252
OS name: "windows 11", version: "10.0", arch: "amd64", family: "windows"

mvn clean test

sqlplus system/password@//localhost:1521/XE

mvn test -Dusername=myUsername -Dpassword=myPassword
mvn test -Dusername=admin -DemailId=secret123@gmail.com

cd C:\Users\Nikshepa\eclipse-workspace\SeleniumTestNgProject4thDec

mvn clean test -Dusername=user1 -DemailId=user1@example.com

How to push code to git and git hub:

Step 1: Initialize a Git Repository
This command creates a .git folder in your project directory, which will be used by Git to track changes in your project. 

git init

Step 2: Add Files to the Staging Area
To stage all the files in your project (i.e., to tell Git which files to track and commit), use the following command:

git add .

The . means "all files in the current directory" — this will add all modified, newly created, or deleted files.

Step 3: Commit Your Changes
After staging the files, you need to commit them. A commit in Git represents a snapshot of your files at that point in time.

To commit your staged files, use the following command:

git commit -m "Your commit message"

In your Git Bash (still in your project directory), run the following command to link your local repository to the remote GitHub repository:

git remote add origin https://github.com/your-username/your-repository-name.git

git checkout -b UAT

git push -u origin UAT

git pull origin UAT

C:\Users\Nikshepa\eclipse-workspace\SeleniumTestNgProject4thDec


mvn clean test -P QAAutomationPractise -Dusername=admin -DemailId="secret123@gmail.com"

java -jar jenkins.war

http://localhost:8080

docker build -t my-java-automation-image .

docker images

docker run -it my-java-automation-image bash

Open the project location:

cd C:\Users\Nikshepa\eclipse-workspace\SeleniumTestNgProject4thDec

docker build -t selenium-testng-app .

docker stop selenium-hub

docker rm selenium-hub

docker run -d -p 4444:4444 --name selenium-hub selenium/hub:latest

docker ps

docker run -d --net grid --name selenium-node-chrome-2 --link selenium-hub:hub selenium/node-chrome:latest

docker run -d --net grid --name selenium-node-firefox-1 --link selenium-hub:hub selenium/node-firefox:latest



